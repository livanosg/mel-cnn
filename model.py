from tensorflow import keras
from tensorflow import dtypes


def model_fn(model_list, input_shape, dropout_rate, alpha):
    base_model = model_list[0](include_top=False, input_shape=input_shape)
    base_model.trainable = False
    image_input = keras.Input(shape=input_shape, name='image')
    base_prep_input = model_list[1](image_input)
    base_model = base_model(base_prep_input, training=False)
    reduce_base = keras.layers.Conv2D(256, kernel_size=3, padding='same')(base_model)
    reduce_base = keras.layers.BatchNormalization()(reduce_base)
    reduce_base = keras.layers.Dropout(rate=dropout_rate)(reduce_base)
    reduce_base = keras.layers.Conv2D(128, kernel_size=3, padding='same')(reduce_base)
    reduce_base = keras.layers.BatchNormalization()(reduce_base)
    reduce_base = keras.layers.Dropout(rate=dropout_rate)(reduce_base)
    reduce_base = keras.layers.Conv2D(64, kernel_size=3, padding='same')(reduce_base)
    reduce_base = keras.layers.BatchNormalization()(reduce_base)
    reduce_base = keras.layers.Dropout(rate=dropout_rate)(reduce_base)
    flat = keras.layers.Flatten()(reduce_base)
    flat = keras.layers.Dense(256, keras.layers.LeakyReLU(alpha=alpha))(flat)
    flat = keras.layers.BatchNormalization()(flat)
    flat = keras.layers.Dropout(rate=dropout_rate)(flat)
    flat = keras.layers.Dense(256, activation=keras.layers.LeakyReLU(alpha=alpha))(flat)
    flat = keras.layers.BatchNormalization()(flat)
    flat = keras.layers.Dropout(rate=dropout_rate)(flat)
    flat = keras.layers.Dense(128, activation=keras.layers.LeakyReLU(alpha=alpha))(flat)
    flat = keras.layers.BatchNormalization()(flat)
    flat = keras.layers.Dropout(rate=dropout_rate)(flat)
    flat = keras.layers.Dense(128, activation=keras.layers.LeakyReLU(alpha=alpha))(flat)
    flat = keras.layers.BatchNormalization()(flat)
    flat = keras.layers.Dropout(rate=dropout_rate)(flat)
    flat = keras.layers.Dense(64, activation=keras.layers.LeakyReLU(alpha=alpha))(flat)
    flat = keras.layers.BatchNormalization()(flat)
    flat = keras.layers.Dropout(rate=dropout_rate)(flat)
    flat = keras.layers.Dense(64, activation=keras.layers.LeakyReLU(alpha=alpha))(flat)
    flat = keras.layers.BatchNormalization()(flat)
    flat = keras.layers.Dropout(rate=dropout_rate)(flat)
    img_fcl_2 = keras.layers.Dense(64, activation=keras.layers.LeakyReLU(alpha=alpha))(flat)

    # -----------------------------================ Values part =================--------------------------------- #
    image_type_input = keras.Input(shape=(2,), name='image_type', dtype=dtypes.float32)
    sex_input = keras.Input(shape=(2,), name='sex', dtype=dtypes.float32)
    anatom_site_input = keras.Input(shape=(7,), name='anatom_site', dtype=dtypes.float32)
    age_input = keras.Input(shape=(1,), name='age', dtype=dtypes.float32)
    concat_inputs = keras.layers.Concatenate()([image_type_input, sex_input, anatom_site_input, age_input])
    concat_inputs = keras.layers.Dropout(rate=dropout_rate)(concat_inputs)
    fc_1 = keras.layers.Dense(512, activation=keras.layers.LeakyReLU(alpha=alpha), )(concat_inputs)
    fc_1 = keras.layers.Dropout(rate=dropout_rate)(fc_1)
    fc_2 = keras.layers.Dense(256, activation=keras.layers.LeakyReLU(alpha=alpha))(fc_1)
    fc_2 = keras.layers.Dropout(rate=dropout_rate)(fc_2)
    fc_3 = keras.layers.Dense(256, activation=keras.layers.LeakyReLU(alpha=alpha))(fc_2)
    fc_3 = keras.layers.Dropout(rate=dropout_rate)(fc_3)
    fc_4 = keras.layers.Dense(128, activation=keras.layers.LeakyReLU(alpha=alpha))(fc_3)
    fc_4 = keras.layers.Dropout(rate=dropout_rate)(fc_4)
    fc_5 = keras.layers.Dense(128, activation=keras.layers.LeakyReLU(alpha=alpha))(fc_4)
    fc_5 = keras.layers.Dropout(rate=dropout_rate)(fc_5)
    fc_6 = keras.layers.Dense(64, activation=keras.layers.LeakyReLU(alpha=alpha))(fc_5)
    fc_6 = keras.layers.Dropout(rate=dropout_rate)(fc_6)

    # -----------------------------================= Concat part =================---------------------------------#
    final_concat = keras.layers.Concatenate()([fc_6, img_fcl_2])
    fc_all = keras.layers.Dense(32, activation=keras.layers.LeakyReLU(alpha=alpha))(final_concat)
    fc_all = keras.layers.BatchNormalization()(fc_all)
    fc_all = keras.layers.Dropout(rate=dropout_rate)(fc_all)
    fc_all = keras.layers.Dense(32, activation=keras.layers.LeakyReLU(alpha=alpha))(fc_all)
    fc_all = keras.layers.BatchNormalization()(fc_all)
    fc_all = keras.layers.Dropout(rate=dropout_rate)(fc_all)
    output_layer = keras.layers.Dense(5, activation='softmax', name='classes')(fc_all)
    return keras.Model([image_input, image_type_input, sex_input, anatom_site_input, age_input], [output_layer])
